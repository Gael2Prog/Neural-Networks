#Change this link for your image link â†“

link = "https://tvazteca.brightspotcdn.com/38/e6/7b33cdd042d5a378d56a7f81fa73/perritos-primeros-auxilios.jpg"

# WARNING! A lot of GPU power required!

import random
import pandas as pd
from PIL import Image
import requests
from io import BytesIO
import numpy as np

urlIn = []
urlOut = []
def urlAddIn(url,out):
  urlIn.append(requests.get(url))
  urlOut.append(out)
urlAddIn("https://hips.hearstapps.com/ghk.h-cdn.co/assets/16/08/gettyimages-530330473.jpg?crop=0.659xw:0.990xh;0.123xw,0.00779xh&resize=980:*",[0,1])
urlAddIn("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTYNG_PRe95sb_dKJgKkfMR__GxrbLUis36yQ&s",[0,1])
urlAddIn("https://thumbor.forbes.com/thumbor/fit-in/900x510/https://www.forbes.com/advisor/wp-content/uploads/2023/07/top-20-small-dog-breeds.jpeg.jpg",[0,1])
urlAddIn("https://cdn.britannica.com/79/232779-050-6B0411D7/German-Shepherd-dog-Alsatian.jpg",[0,1])
urlAddIn("https://media.4-paws.org/7/b/8/4/7b84da50b67c8c39b9deb0d6581efa3309960ed6/VIER%20PFOTEN_2019-12-13_209-2001x2000-600x600.jpg",[1,0])
urlAddIn("https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/Cat_August_2010-4.jpg/1200px-Cat_August_2010-4.jpg",[1,0])
urlAddIn("https://cdn.mos.cms.futurecdn.net/ASHH5bDmsp6wnK6mEfZdcU-1200-80.jpg",[0,1])
urlAddIn("https://media.istockphoto.com/id/1443562748/photo/cute-ginger-cat.jpg?s=612x612&w=0&k=20&c=vvM97wWz-hMj7DLzfpYRmY2VswTqcFEKkC437hxm3Cg=",[1,0])
urlAddIn("https://hips.hearstapps.com/ghk.h-cdn.co/assets/17/30/bernese-mountain-dog.jpg?crop=1.00xw:0.668xh;0,0.252xh&resize=640:*",[0,1])
urlAddIn("https://cdn.britannica.com/70/234870-050-D4D024BB/Orange-colored-cat-yawns-displaying-teeth.jpg",[1,0])
urlAddIn("https://media.istockphoto.com/id/497004261/photo/meow.jpg?b=1&s=170667a&w=0&k=20&c=PNTHd33a_t50W9-WljHCWKY8STjA8KMNMKnAvYYH0xY=",[1,0])
urlAddIn("https://images.pexels.com/photos/1170986/pexels-photo-1170986.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500",[1,0])
urlAddIn("https://cdn.theatlantic.com/thumbor/vDZCdxF7pRXmZIc5vpB4pFrWHKs=/559x0:2259x1700/1080x1080/media/img/mt/2017/06/shutterstock_319985324/original.jpg",[1,0])
scale = 20

def scaleImg(img, scale):
    width, height = img.size
    if width < height:
        newWidth = scale
        newHeight = int(height / (width / scale))
        cropTop = (newHeight - scale) // 2
        cropBottom = cropTop + scale
        crop = (0, cropTop, scale, cropBottom)
    else:
        newHeight = scale
        newWidth = int(width / (height / scale))
        cropLeft = (newWidth - scale) // 2
        cropRight = cropLeft + scale
        crop = (cropLeft, 0, cropRight, scale)
    imResize = img.resize((newWidth, newHeight))
    imCrop = imResize.crop(crop)
    imCrop = imCrop.convert('RGB')
    return imCrop

def rgb_of_pixel(imCrop, x, y):
  global inputs
  r, g, b = imCrop.getpixel((x, y))
  inputs = np.append(inputs, [r, g, b])
  return inputs

img = Image.open(BytesIO(urlIn[0].content))
img = scaleImg(img, scale)
inputs = np.array([])
for i in range(scale):
  for j in range(scale):
    inputs = rgb_of_pixel(img, i, j)
layers = 6
neuronsL = len(inputs)
outputN = 2
input_size = len(inputs)


def relu(x):
  return np.maximum(0, x)
def relu_derivative(x):
    return np.where(x > 0, 1, 0)
def sigmoid(x):
  return 1 / (1 + np.exp(-x))

weights_input_hidden = np.random.randn(len(inputs), layers*neuronsL+outputN)
weights_hidden_output = np.random.randn(layers*neuronsL+outputN, outputN)
learning_rate = 0.01

def forward_propagation(inputs):
    hidden_layer_input = np.dot(inputs, weights_input_hidden)
    hidden_layer_output = relu(hidden_layer_input)
    output_layer_input = np.dot(hidden_layer_output, weights_hidden_output)
    output = output_layer_input
    output = sigmoid(output)
    return hidden_layer_output, output

def backpropagation(inputs, hidden_layer_output, output, target):
    global weights_hidden_output, weights_input_hidden
    output_error = target - output
    output_delta = output_error * relu_derivative(output)

    hidden_error = np.dot(output_delta, weights_hidden_output.T)
    hidden_delta = hidden_error * relu_derivative(hidden_layer_output)

    weights_hidden_output += np.dot(hidden_layer_output.reshape(-1,1), output_delta.reshape(1,-1)) * learning_rate
    weights_input_hidden += np.dot(inputs.reshape(-1,1), hidden_delta.reshape(1,-1)) * learning_rate

file_path = "weights.txt"

# If weights file already created delete the lines below
for epoch in range(10000):
  for x in range(13):
    img = Image.open(BytesIO(urlIn[x].content))
    img = scaleImg(img, scale)
    inputs = np.array([])
    for i in range(scale):
      for j in range(scale):
        inputs = rgb_of_pixel(img, i, j)
    target = np.array(urlOut[x])
    neuronsL = len(inputs)
    outputN = 2
    input_size = len(inputs)


    hidden_layer_output, output = forward_propagation(inputs)
    backpropagation(inputs, hidden_layer_output, output, target)
weights = []
for i in range(0,len(weights_input_hidden)):weights.append(weights_input_hidden[i])
for i in range(0,len(weights_hidden_output)):weights.append(weights_hidden_output[i])



with open(file_path, "w") as file:
    for item in weights:
      for i in range(len(item)):
        file.write(str(item[i]) + "\n")

# If weights file already created delete the lines above

weights = []
with open(file_path, "r") as file:
    for line in file:
      weights.append(np.array(eval(line)))

img = scaleImg(Image.open(BytesIO(requests.get(link).content)), scale)
inputs = []
for i in range(scale):
  for j in range(scale):
    r, g, b = img.getpixel((i, j))
    inputs.append(r)
    inputs.append(g)
    inputs.append(b)

neuronsL = len(inputs)
outputN = 2
current = [1,2]
for l in range(layers+1):
  for n in range(neuronsL):
    current.append(0)
    for i in range(len(inputs)):
      current[n]+= inputs[i]*weights[l * neuronsL + n]
  if(l==layers-1):
    neuronsL = outputN
  inputs = current[:]
  current = []

for i in range(len(inputs)):
  inputs[i] = sigmoid(inputs[i])

print("The image is ", round(inputs[0]*100, 2), "% cat and ", round(inputs[1]*100, 2), "% dog.")
